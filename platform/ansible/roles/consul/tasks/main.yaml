---
- name: Allow run sudo commands without password
  community.general.sudoers:
    name: admin_role
    state: present
    user: "{{ admin_user }}"
    commands: ALL
  when: not bootstrapped_file.stat.exists

- name: Add HashiCorp GPG key
  ansible.builtin.apt_key:
    url: https://apt.releases.hashicorp.com/gpg
    state: present
  when: not bootstrapped_file.stat.exists

- name: Set distribution codename fact
  set_fact:
    distro_codename: "{{ ansible_distribution_release }}"
  when: not bootstrapped_file.stat.exists

- name: Add HashiCorp repository
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64] https://apt.releases.hashicorp.com {{ distro_codename }} main"
    state: present
  when: not bootstrapped_file.stat.exists

- name: Update APT package index
  ansible.builtin.apt:
    update_cache: yes
  when: not bootstrapped_file.stat.exists

- name: Install Consul
  ansible.builtin.apt:
    name: consul
    state: latest

- name: Verify consul installation
  ansible.builtin.command: consul version
  register: consul_version_output

- name: Display consul version
  ansible.builtin.debug:
    msg: "Consul version installed: {{ consul_version_output.stdout }}"

- name: Create Consul user and group
  ansible.builtin.user:
    name: "{{ consul_user }}"
    state: present
    system: yes
    home: "{{ consul_data_dir }}"
    shell: /bin/false
  when: not bootstrapped_file.stat.exists

- name: Create Consul data and config directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: '0755'
  with_items:
    - "{{ consul_data_dir }}"
    - "{{ consul_config_dir }}"
  when: not bootstrapped_file.stat.exists

- name: Generate Consul encryption key
  command: /usr/bin/consul keygen
  register: consul_keygen_result
  when: not bootstrapped_file.stat.exists
  

- name: Set encryption key fact
  set_fact:
    consul_encryption_key: "{{ consul_keygen_result.stdout }}"
  when: not bootstrapped_file.stat.exists

- name: Create consul service
  ansible.builtin.template:
    src: templates/initial-config.json.j2
    dest: "{{ consul_config_dir }}/config.json"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: '0644'
  when: not bootstrapped_file.stat.exists

- name: Create consul service
  ansible.builtin.template:
    src: templates/consul.service.j2
    dest: "{{ consul_service_file }}"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: '0644'
  when: not bootstrapped_file.stat.exists

- name: Reload systemd to pick up new service
  ansible.builtin.systemd:
    daemon_reload: yes
  when: not bootstrapped_file.stat.exists

- name: Start and enable Consul service
  ansible.builtin.systemd:
    name: consul
    state: started
    enabled: yes
  when: not bootstrapped_file.stat.exists

- name: Wait for Consul to be available
  uri:
    url: "http://localhost:8500/v1/status/leader"
    method: GET
    status_code: 200
  register: consul_status
  until: consul_status.status == 200
  retries: 10
  delay: 5

- name: Wait for 10 seconds
  wait_for:
    timeout: 10

- name: Create policy for statefiles path using template
  template:
    src: "templates/statefiles_policy.json.j2"
    dest: "/tmp/statefiles_policy.json"

- name: Read statefiles policy file content
  slurp:
    src: "/tmp/statefiles_policy.json"
  register: statefiles_policy_content

- name: Create policy for statefiles path
  uri:
    url: "http://localhost:8500/v1/acl/policy"
    method: PUT
    body: "{{ statefiles_policy_content.content | b64decode }}"
    body_format: json
  register: statefiles_policy

- name: Create agent token using template
  template:
    src: "templates/agent_token.json.j2"
    dest: "/tmp/agent_token.json"

- name: Read agent token file content
  slurp:
    src: "/tmp/agent_token.json"
  register: agent_token_content

- name: Create agent token
  uri:
    url: "http://localhost:8500/v1/acl/token"
    method: put
    body: "{{ agent_token_content.content | b64decode }}"
    body_format: json
  register: agent_token

- name: Create service account token using template
  template:
    src: "templates/service_account_token.json.j2"
    dest: "/tmp/service_account_token.json"
    vars:
      policy_id: "{{ statefiles_policy.json.ID }}"

- name: Read service account token file content
  slurp:
    src: "/tmp/service_account_token.json"
  register: service_account_token_content

- name: Create service account token
  uri:
    url: "http://localhost:8500/v1/acl/token"
    method: PUT
    body: "{{ service_account_token_content.content | b64decode }}"
    body_format: json
  register: service_account_token

- name: Update Consul configuration with agent token
  copy:
    dest: "{{ consul_config_dir }}/agent_token.hcl"
    content: |
      acl {
        tokens {
          agent = "{{ agent_token.json.SecretID }}"
        }
      }
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: '0644'

- name: Create consul service
  ansible.builtin.template:
    src: templates/secured-config.json.j2
    dest: "{{ consul_config_dir }}/config.json"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: '0644'
  when: not bootstrapped_file.stat.exists

- name: Reload Consul to apply new agent token
  systemd:
    name: consul
    state: restarted

# - name: Create bootstrapped file
#   ansible.builtin.file:
#     path: "{{ ansible_user_dir }}/bootstrapped"
#     state: touch
#   when: not bootstrapped_file.stat.exists